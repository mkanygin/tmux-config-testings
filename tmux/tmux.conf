# vim:ft=conf:
#############################################
### ████████╗███╗   ███╗██╗   ██╗██╗  ██╗ ###
### ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝ ###
###    ██║   ██╔████╔██║██║   ██║ ╚███╔╝  ###
###    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗  ###
###    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗ ###
###    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝ ###
#############################################

########################################################################
# @Version       : v0.01
# @Author        : Sebastian Thies Lange
# @Contact       : slange-dev@mail.ru
# @License       :
# @ReadMe        :
# @Copyright     : (c) 2023 Sebastian Thies Lange, Home Developments ###
# @Created       :
# @File          : .tmux.conf
# @Description   : Tmux config file
# @TODO          : Check it: From tmux 3.2, middle click will paste the top tmux paste buffer by default.
# @TODO          : Check it: From tmux 3.2, create menues
# @TODO          : Check it: use {} on larger complicated nested string blocks, provided those are for 3.0 and newer
# @TODO          : Check it: right mouse click paste buffer
# @Other         :
# @Resource      : https://github.com/slange-dev
########################################################################
# =============
# === Notes ===
# =============
# CTRL keys may be prefixed with ‘C-’ or ‘^’ (https://github.com/tmux/tmux/wiki/Modifier-Keys#limitations-of-ctrl-keys)
# Shift with ‘S-’ (https://github.com/tmux/tmux/wiki/Modifier-Keys#limitations-of-shift-keys)
# Alt (meta) with ‘M-’
#
# Prefix key is C-a (CTRL + a)
#
# Tmux must be installed before

# ==========================
# === Check Tmux Version ===
# ==========================
# For version-specific commands see: https://github.com/tmux/tmux/blob/master/CHANGES
# Save tmux version in the "TMUX_VERSION" env variable
run-shell 'command tmux setenv -g TMUX_VERSION $(command tmux -V | cut -d" " -f2 | tr -d " |\-|.|[:alpha:]")'

# ========================
# === General settings ===
# ========================
# Set the default terminal for new windows created in this session -
# the default value of the TERM environment variable.
# For tmux to work correctly, this must be set to ‘screen’, ‘tmux’ or a derivative of them.
set -g default-terminal "${TERM}"
#set -g default-terminal "tmux-256color"

# ==================
# === xterm-keys ===
# ==================
# https://github.com/tmux/tmux/wiki/Modifier-Keys#modifiers-and-function-keys
# All tmux versions recognise this form of key, and tmux has sent it to application running inside by default since tmux 2.4
# In older(< 2.4) versions, the xterm-keys option must be enabled
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
    'set -g xterm-keys on'

# =================
# === TrueColor ===
# =================
# TrueColor support tmux > 2.2
# https://github.com/tmux/tmux/commit/427b8204268af5548d09b830e101c59daa095df9
#
# ,*-256color*:TC Allow tmux to send 256-color to its "parent terminal",
# allowing the terminal to render colors in full.
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set -ga terminal-overrides ',*-256color*:TC''

# Tmux > 3.2
# Set terminal features for terminal types read from terminfo(5)
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set -ga terminal-features ',*-256color*:TC''

# =========================
# === Undercurl colours ===
# =========================
# Undercurl colours
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
#    'set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm''

# Tmux > 3.2
# Set terminal features for terminal types read from terminfo(5)
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#    'set -ga terminal-features ',*:Smulx=\E[4::%p1%dm''

# ==========================
# === Underscore colours ===
# ==========================
# Underscore colours
# needs tmux => 3.0
# https://github.com/tmux/tmux/blob/7c30056d96689cc8a66c748e7a18e180665b7d14/CHANGES#L939
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 30 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
#    'set -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m''

# Tmux > 3.2
# Set terminal features for terminal types read from terminfo(5)
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#    'set -ga terminal-features ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m''

# ========================
# === Scrolling issues ===
# ========================
# If you have issues scrolling with Shift-Page Up/Down in your terminal,
# the following xterm*:smcup@:rmcup@ will remove the smcup and rmcup capabilities
# for any term that reports itself as anything beginning with xterm
#
# With tmux > 3.2 this can be added with the terminal-features option:
# set -as terminal-features ",gnome*:RGB"
#
# Tmux < 3.2 use the terminal-overrides option
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set -ga terminal-overrides ',xterm*:smcup@:rmcup@'' \
    'set -ga terminal-features ',xterm*:smcup@:rmcup@''

# =====================
# === Extended keys ===
# =====================
# tmux > 3.2 Supports extended keys
# xterm(1), mintty and iTerm2 currently support this
# https://github.com/tmux/tmux/wiki/Modifier-Keys#extended-keys
#
# tmux > 3.2 Supports terminal-features
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set -g extended-keys on; set -ga terminal-features ',xterm*:extkeys''

# extended-keys-format ??
# Revamp extended keys support to more closely match xterm and support mode 2
# as well as mode 1. This is a substantial change to key handling which changes
# tmux to always request mode 2 from parent terminal, changes to an unambiguous
# internal representation of keys, and adds an option (extended-keys-format) to
# control the format similar to the xterm(1) formatOtherKeys resource.
#if-shell -b '[ "$(echo $TMUX_VERSION > 3.5" | bc)" -eq 1 ]' \
#    'set -s extended-keys-format'

# Set history limit
# Set the maximum number of lines held in window history.
# This setting applies only to new windows - existing
# window histories are not resized and retain the limit at the point they were created.
set -g history-limit 30000

# Set buffer limit
# Set the number of buffers; as new buffers are added to the top of the stack,
# old ones are removed from the bottom if necessary to maintain this maximum length.
set -g buffer-limit 100

# Set key speed rate (Allows for faster key repetition)
# tmux > 3.5 Reduce default escape-time to 10 milliseconds.
# Set the time in milliseconds for which tmux waits after
# an escape is input to determine if it is part of a function or meta key sequences.
# Default is 500 milliseconds (half a second)
set -sg escape-time 0

# Set refresh rate for display-message
# Set the amount of time for which status line messages and
# other on-screen indicators are displayed.
# If set to 0, messages and indicators are displayed until a key is pressed.
# time is in milliseconds.
set -g display-time 3000

#
# A pane with this flag set is not destroyed when the program running in it exits.
# If set to failed, then only when the program exit status is not zero.
# The pane may be reactivated with the respawn-pane command.
set -g remain-on-exit off

# Set repeat timeout
# Allow multiple commands to be entered without pressing
# the prefix-key again in the specified time milliseconds (the default is 500).
# Whether a key repeats may be set when it is bound using the -r flag to bind-key.
# Repeat is enabled for the default keys bound to the resize-pane command.
set -g repeat-time 400

# Set window renameing
# tmux > 3.3 If automatic-rename is off, allow the rename escape sequence to set an empty name.
set-window-option -g allow-rename off
set-window-option -g automatic-rename off

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
set-window-option -g aggressive-resize on

# ======================
# === Terminal title ===
# ======================
# Set terminal title
#
# Attempt to set the client terminal title using the tsl and fsl terminfo(5) entries if they exist.
# tmux automatically sets these to the \e]0;...\007 sequence if the terminal appears to be xterm(1).
# This option is off by default.
set -g set-titles on

# Set terminal title format
# set the client terminal title if set-titles is on.
#
# S = Name of the Tmux session
# I = Window index number
# W = Current Tmux window name
# P = Pane index number
# pane_current_path =
# pane_current_command =
set -g set-titles-string "[ #S ] : [ #I:#W [ #P ] ] : [ #{pane_current_path} ] : [ #{pane_current_command} ]"

# =============================
# === Window/Pane numbering ===
# =============================
# Windows numbering
# Set the base index from which an unused index should be searched when a new window is created.
# The default is zero.
set -g base-index 1

# Make pane numbering consistent with windows numbering
# Like base-index, but set the starting index for pane numbers.
set-window-option -g pane-base-index 1

# =====================
# === Mouse Support ===
# =====================
# All tmux version < 2.1 has the 4 mouse options:
# mouse-resize-pane
# mouse-select-pane
# mouse-select-window
# mode-mouse
# ...which turns on mouse support ( https://github.com/tmux/tmux/blob/2.1/CHANGES#L6L13 )
# All tmux versions > 2.1 was replaced the mouse options with:
# mouse on
# ...which turns on mouse support entirely (Changes from v2.1 to v2.2 ( https://github.com/tmux/tmux/blob/2.2/CHANGES#L72 ))
# Mouse support for tmux < v2.1 and > v2.1
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 21 ]' \
    'set -g mode-mouse on; set -g mouse-select-pane on; set -g mouse-resize-pane on; set -g mouse-select-window on' \
    'set -g mouse on'

# =====================
# === UTF 8 Support ===
# =====================
# UTF8 is autodetected in > v2.2, but errors if explicitly set
# Changes from v2.1 to v2.2, ( https://github.com/tmux/tmux/blob/2.2/CHANGES#L13 )
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 22 ]' \
    'set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on'

# =============
# === Clock ===
# =============
# Show clock in a window
# Clock in green
set-window-option -g clock-mode-colour green

# Clock in 24 hour style
set-window-option -g clock-mode-style 24

# ====================
# === Shell config ===
# ====================
# Start a non-login shell
# tmux starts a login shell by default, which may result in multiple negative side effects:
# - Users of fortune may notice that quotes are printed when creating a new panel.
# - The configuration files for login shells such as $HOME/.profile are interpreted each time a new panel is created,
# so commands intended to be run on session initialization (e.g. setting audio level) are executed.
#
# tmmux < 3.5 Use sh for command prompt, #() and popups.
# tmmux > 3.5 Use default-shell for command prompt, #() and popups.
#
# Set bash as the default shell
set -g default-shell "/bin/bash"
set -g default-command "${SHELL}"

# ==========================
# === Passthrough config ===
# ==========================
# Tmux > 3.3
# passthrough is turned off by default!
# https://man.archlinux.org/man/tmux.1.en#allow-passthrough
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 33 ]' \
    'set-option -g allow-passthrough off'

# ====================
# === Key bindings ===
# ====================
# Unbind all default key bindings
# unbind-key -a

# First we unbind default key bindings
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind "}"  # swap-pane -D
unbind "{"  # swap-pane -U
unbind ")"  # switch next session
unbind "("  # switch previous session
unbind [    # Enter copy mode
unbind ]    # Paste the most recently copied buffer of text
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind "="  # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

#
unbind M-PageUp

#
unbind -n C-h
unbind C-h

# ==================
# === Prefix key ===
# ==================
# Change prefix to C-a (CTRL + a) key,
# easier to type
# same setting in screen?

# Unbind old prefix CTRL + b first
unbind C-b

# Change prefix to CTRL + a key
set -g prefix C-a

# Send Ctrl+a to applications by pressing it twice
bind C-a send-prefix

# ================
# === Help Key ===
# ================
# List all bind keys
bind -n M-? list-keys

# ===================
# === Command Key ===
# ===================
# Open the tmux command line in Vim style PREFIX + : key
bind : command-prompt

# tmux > 3.2 Add C-g (CTRL + g) to cancel command prompt with vi keys as well as emacs, and q in command mode.

# ===================
# === Config Keys ===
# ===================
# Edit the configuration and reload tmux with new config
# PREFIX + CTRL + e
#
# tmux < 3.2 supports display
# tmux > 3.2 supports display-popup
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#    'bind C-e new-window -n "tmux.conf" "sh -c '${EDITOR:-vim} ~/.tmux.conf && command tmux source ~/.tmux.conf && command tmux display-popup -h 2 -w 45 "echo Tmux configuration file edited and reloaded"'"' \
#    'bind C-e new-window -n "tmux.conf" "sh -c '${EDITOR:-vim} ~/.tmux.conf && command tmux source ~/.tmux.conf && command tmux display "Tmux configuration file edited and reloaded\"'"'

# Reloaded tmux configuration file
# PREFIX + CTRL + r
# tmux > 3.2 supports display-popup
# tmux < 3.2 supports display
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'bind C-r source-file ~/.tmux.conf \; display-popup -d "#{pane_current_path}" -w 20% -h 15% "echo Tmux configuration reloaded!"' \
    'bind C-r source-file ~/.tmux.conf \; display "Tmux configuration reloaded!"'

# ===================
# === Window Keys ===
# ===================
# Create new window and retain cwd
# PREFIX + w
bind w new-window -c "#{pane_current_path}"

# Open windows select menue
# PREFIX + ALT + W
bind W choose-tree -Zw

# Prompt to rename a window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# PREFIX + CTRL w
bind C-w command-prompt -p 'New window at:' 'new-window -c "#{pane_current_path}" -t %1'

# PREFIX + CTRL W
bind C-W command-prompt -p 'Insert window at:' 'new-window -c "#{pane_current_path}" -a -t %1; swap-window -t -1'

# Window manipulations
# PREFIX + ALT w
bind M-w command-prompt -p "Move window to:" "move-window -t %%"

# PREFIX + ALT W
bind M-W command-prompt -p "Swap window with:" "swap-window -t %%"

# move windows
#bind-key S-Left  swap-window -t :- \; previous-window     # move left
#bind-key S-Right swap-window -t :+ \; next-window         # move right

# move windows (for tmux < 3.0), see: https://github.com/tmux/tmux/issues/2056
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
#   'bind-key S-Left  swap-window -t :- ; \
#    bind-key S-Right swap-window -t :+ ; \

# ====================
# === Session Keys ===
# ====================
# Create a new session
# PREFIX + s
bind s new-session

# Open session select menue
# PREFIX + S
bind S choose-session -F 'session #{session_name} #{?session_attached,(attached),          } : #{session_windows} windows (#{window_name}#{pane_title})' \; refresh-client -S

# With fzf finder
#bind S split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# With popup and fzf
#bind s display-popup -E "\
#  tmux list-sessions -F '#{?session_attached,,#{session_name}} ' |\
#  sed '/^\s*$/d' |\
#  fzf --reverse --header jump-to-session |\
#  xargs tmux switch-client -t"

# Automatic prompt to rename a session right after it's created
set-hook -g after-new-session 'command-prompt -I "#{session_name}" "rename-session '%%'"'

# Switch to session
#bind n   switch-client -n \; refresh-client -S
#bind N   switch-client -p \; refresh-client -S

# ====================
# === Reorder Keys ===
# ====================
# Set automatic reorder window numbering?
set -g renumber-windows off

# Set . key to reorder the windows
# PREFIX + .
bind . move-window -r \; display-message "Windows reordered..."

# ===================
# === Rename Keys ===
# ===================
# Rename the selected window
# PREFIX + r
bind r command-prompt -I "#{window_name}" "rename-window '%%'"

# Rename the selected session
# PREFIX + R
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# ==================
# === Split Keys ===
# ==================
# PREFIX + | for vertical split
bind | split-window -h -p 50 -c "#{pane_current_path}"

# PREFIX + - for vertical split
bind - split-window -v -p 50 -c "#{pane_current_path}"

# PREFIX + h for horizontal split
bind h split-window -h -p 50 -c "#{pane_current_path}"

# PREFIX + v for vertical split
bind v split-window -v -p 50 -c "#{pane_current_path}"

# split panes using \
# https://github.com/christoomey/dotfiles/issues/127
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
    "bind \\ split-window -h -c '#{pane_current_path}'; \
"

#
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 30 ]' \
    "bind \\\\ split-window -h -c '#{pane_current_path}'; \
"

# ========================
# === Resize Pane Keys ===
# ========================
# Use vi style key bindings
# Vi/Vim Style: h / j / k / l = left / down / up / right
# Normal pane resize with ALT + arrow keys without prefix
# tmux 3.2 Add a -T flag to resize-pane to trim lines below the cursor, moving lines out of the history.

# move left
bind -n M-Left resize-pane  -L 5

# move down
bind -n M-Down resize-pane  -D 5

# move up
bind -n M-Up resize-pane    -U 5

# move right
bind -n M-Right resize-pane -R 5

# Vim pane resize with ALT + hjkl without prefix
# Check if Vim is running
#is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'

# https://github.com/christoomey/vim-tmux-navigator/issues/295#issuecomment-1021591011
#is_vim_or_fzf="children=(); i=0; pids=( $(ps -o pid= -t '#{pane_tty}') ); \
#while read -r c p; do [[ -n c && c -ne p && p -ne 0 ]] && children[p]+=\" $\{c\}\"; done <<< \"$(ps -Ao pid=,ppid=)\"; \
#while (( $\{#pids[@]\} > i )); do pid=$\{pids[i++]\}; pids+=( $\{children[pid]-\} ); done; \
#ps -o state=,comm= -p \"$\{pids[@]\}\" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|fzf)(diff)?$'"

# https://github.com/christoomey/vim-tmux-navigator
# Smart pane switching with awareness of Vim, Fzf, and Telescope
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"

# https://github.com/christoomey/vim-tmux-navigator/blob/a9b52e7d36114d40350099f254b5f299a35df978/vim-tmux-navigator.tmux#L25C7-L25C74
  #| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

is_telescope="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?Telescope'"

# move left
bind -n M-h if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-h" "resize-pane -L 5"

# move down
bind -n M-j if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-j" "resize-pane -D 5"

# move up
bind -n M-k if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-k" "resize-pane -U 5"

# move right
bind -n M-l if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-l" "resize-pane -R 5"

# Check if tmux version is <v3.0 or >v3.0
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
    #"bind -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\'  'resize-pane -l'" \
    #"bind -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\\\'  'resize-pane -l'"

# =======================
# === Break Pane Keys ===
# =======================
# conflict with ?
# Break pane out into new window
#bind-key b break-pane -d

# ============================
# === Pane Navigation Keys ===
# ============================
# Normal pane select with CTRL + arrow keys without prefix before
# move left
bind -n C-Left select-pane  -L

# move down
bind -n C-Down select-pane  -D

# move up
bind -n C-Up select-pane    -U

# move right
bind -n C-Right select-pane -R

# Smart pane switching with awareness of vim splits
# from: https://github.com/christoomey/vim-tmux-navigator
# Vim pane selection with ALT + h/j/k/l without prefix before
#is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'

# https://github.com/christoomey/vim-tmux-navigator/issues/295#issuecomment-1021591011
#is_vim_or_fzf="children=(); i=0; pids=( $(ps -o pid= -t '#{pane_tty}') ); \
#while read -r c p; do [[ -n c && c -ne p && p -ne 0 ]] && children[p]+=\" $\{c\}\"; done <<< \"$(ps -Ao pid=,ppid=)\"; \
#while (( $\{#pids[@]\} > i )); do pid=$\{pids[i++]\}; pids+=( $\{children[pid]-\} ); done; \
#ps -o state=,comm= -p \"$\{pids[@]\}\" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|fzf)(diff)?$'"

# https://github.com/christoomey/vim-tmux-navigator
# Smart pane switching with awareness of Vim, Fzf, and Telescope
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"

# https://github.com/christoomey/vim-tmux-navigator/blob/a9b52e7d36114d40350099f254b5f299a35df978/vim-tmux-navigator.tmux#L25C7-L25C74
  #| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

is_telescope="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?Telescope'"

# Select pane left
bind -n C-h if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-h" "select-pane -L"

# Select pane down
bind -n C-j if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-j" "select-pane -D"

# Select pane up
bind -n C-k if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-k" "select-pane -U"

# Select pane right
bind -n C-l if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-l" "select-pane -R"

#
# select-pane [-DdeLlMmRUZ] [-T title] [-t target-pane]
# Make pane target-pane the active pane in its window.
# -l is the same as using the last-pane(Select the last (previously selected) pane) command.
# Check if tmux version is <v3.0 or >v3.0
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
    #"bind -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\'  'select-pane -l'" \
    #"bind -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\\\'  'select-pane -l'"

# Switch panes while in copy mode
#bind-key -T copy-mode-vi C-h  select-pane -L
#bind-key -T copy-mode-vi C-j  select-pane -D
#bind-key -T copy-mode-vi C-k  select-pane -U
#bind-key -T copy-mode-vi C-l  select-pane -R
#bind-key -T copy-mode-vi C-\\ select-pane -l

# ======================
# === Pane join Keys ===
# ======================
# Pane movement to window
#bind j command-prompt -p "join pane from:"  "join-pane -s '%%'"

#bind s command-prompt -p "send pane to:"  "join-pane -t '%%'"

# ==============================
# === Window navigation Keys ===
# ==============================
# Switch windows with SHIFT + LEFT/RIGHT keys without prefix
bind -n S-Left  previous-window
bind -n S-Right next-window

# Switch to specific window with PREFIX + 0-9 keys
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9
bind 0 last-window

# ================================
# === Display pane Number keys ===
# ================================
# Display the pane numbers to identify
# PREFIX + q
bind q display-panes

# =================
# === Zoom keys ===
# =================
# Zoom the pane
# PREFIX + z
bind z resize-pane -Z

# ============================
# === Syncronize pane keys ===
# ============================
# Synchronize all panes in a window with PREFIX + y
# bind y set-window-option synchronize-panes

# =================
# === Link keys ===
# =================
# Link a window from another session
# PREFIX + L
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# =================
# === Swap keys ===
# =================
# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
#bind \\ if-shell '[ #{pane_index} -eq 1 ]' \
#     'swap-pane -s "!"' \
#     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Swap pane with PREFIX + CTRL + o
bind -r C-o swap-pane -D

# ===================
# === Switch keys ===
# ===================
# Switch client
# Popup window, tmux > 3.2 supports display-popup
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'bind -n C-s display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"'

# ==================
# === Merge keys ===
# ==================
# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)

# PREFIX + CTRL + u
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# =================
# === Kill Keys ===
# =================
# ToDo: X and X for Kill Windows and for kill Panes?
# Kill pane/window/session keys

# Kill pane with "PREFIX + x"
bind x confirm-before -p "kill-pane #P in #W? (y/n)" kill-pane

# Kill window with "PREFIX + X"
#bind X kill-window

# Which window to kill with PREFIX + X
# What windows will you kill? ex: bash, Help, htop, per names...
bind X command-prompt -p "Windows to kill(by name)?:" "              \
    run-shell '                                             \
        for w in \$(echo %% | sort -n -r); do               \
            command tmux kill-window -t \$w;                \
        done;                                               \
    '"

# Kill all other windows otherwise the current selected
# PREFIX + CTRL + x
bind C-x confirm-before -p "kill all windows otherwise #W? (y/n)" "kill-window -a"

# Kill your Session with "PREFIX + Q"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Kill all other session otherwise your selected one
bind C-Q confirm-before -p "kill all sessions otherwise #S? (y/n)" "kill-session -a"

# ===================
# === Detach Keys ===
# ===================
# Detach from session with PREFIX + d
bind d detach

# Detach all other sessions from all user with PREFIX + D
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach all sessions from other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached, can´t Detach other clients"'

# ====================
# === Logging Keys ===
# ====================
# Toggle (start/stop) logging in the current pane.
    # Key binding: prefix + shift + p
    # File name format: tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: ~/tmux-my-session-0-1-20140527T165614.log

# Save visible text, in the current pane. Equivalent of a "textual screenshot".
    # Key binding: prefix + alt + p
    # File name format: tmux-screen-capture-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: tmux-screen-capture-my-session-0-1-20140527T165614.log

# Save complete history
# Save complete pane history to a file. Convenient if you retroactively remember you need to log/save all the work.
    # Key binding: prefix + alt + shift + p
    # File name format: tmux-history-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: tmux-history-my-session-0-1-20140527T165614.log
    # NOTE: this functionality depends on the value of history-limit - the number of lines Tmux keeps in the scrollback buffer. Only what Tmux kept will also be saved, to a file.
# Use set -g history-limit 50000 in .tmux.conf, with modern computers it is ok to set this option to a high number.

# Clear pane history
    # Key binding: prefix + alt + c
# This is just a convenience key binding.

# Save complete terminal output to a file ~/.tmux/buffer/tmux.buffer
# (prefix) + b
bind b capture-pane -b temp-capture-buffer -S - \; save-buffer -b temp-capture-buffer ~/.tmux.buffer \; delete-buffer -b capture-buffer

# Save complete terminal output to a file and ask for file to saved
# (prefix) + B
bind B command-prompt -I "~/.tmux.buffer" -p "Store current pane contents to file:" "capture-pane -b temp-capture-buffer -S -; save-buffer -b temp-capture-buffer %1; delete-buffer -b capture-buffer"

# ==========================
# === Vlock Locking Keys ===
# ==========================
# tmux > 3.4 Set default lock command to vlock on Linux if present at build time.

# Lock command to execute
set -g lock-command "vlock"

# Set TMOUT variable from .bashrc if exist
# Set automatic lock after X seconds
# 0 = never, 900=15min., 1800=30min. etc.
if-shell -b '[ ! -z $TMOUT ]' \
    'set -g lock-after-time $TMOUT' \
    'set -g lock-after-time 900'

# PREFIX l lock the complete session
# bind L lock-client !in use by linking windows!
bind l lock-session

# ======================
# === Statusbar Keys ===
# ======================
# Statusbar can be toggled with F7
bind -T root F7 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F7" "set -g status \; display-message 'Statusbar is now [#{?status,ON,OFF}]'"

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
# Monitor windows activity silence can be set in seconds with F8
bind -T root F8 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F8" "set-window-option monitor-silence 0 \; display-message 'Monitor window silence [OFF]' \; command-prompt -p 'Monitor silence: interval (s)' 'set-window-option monitor-silence %%'"

# Monitor windows activity can be shutdown with F9
bind -T root F9 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F9" "set-window-option monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'"

# Display NO messages about silence, bell, and activity.
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off

# =========================
# === Mouse toggle Keys ===
# =========================
# ToDo: Add gnome terminal, etc
tmux_commands_with_function_keys="htop mc nvim vi vim xterm"

# Mouse can be toggled with F10
bind -T root F10 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F10" "set -g mouse \; display-message 'Mouse [#{?mouse,ON,OFF}]'"

# =================
# === Clipboard ===
# =================
# set-clipboard option was added in tmux 1.5.
# tmux > 1.5 set the default to on
#
# set-clipboard external option was added in tmux 2.6.
# tmux > 2.6 changed the default to external
#
# The difference is that "on" both makes tmux set the clipboard for the outside terminal,
# and allows applications inside tmux to set tmux's clipboard (adding a paste buffer).
#
# "external" only makes tmux set the clipboard and forbids applications inside from doing so.
#
# iTerm2 works with clipboard out of the box
#
# if it's "on" tmux is trying to set the clipboard with escape sequences which conflicts with xsel (https://github.com/tmux/tmux/issues/1407)
#
# tmux > 2.6 external < 2.6 on
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 26 ]' \
    'set -g set-clipboard external' \
    'set -g set-clipboard on'

# =================
# === Copy mode ===
# =================
# Using ANSI OSC 52 escape sequence fallback for MacOS support
# ( https://medium.com/free-code-camp/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b )
if-shell -b '[ uname -s = Darwin ]' \
    'set -g @copy_use_osc52_fallback on' \
    'set -g @copy_use_osc52_fallback off'

# vim keys in copy and choose mode
set-window-option -g mode-keys vi
set -g status-keys vi

# https://tmuxguide.readthedocs.io/en/latest/tmux/tmux.html -> 1.10. Copy mode
# Command	Description
# Esc = go to copy mode
# q	= quit mode
# j, k, l, h = down, up, right left
# J or K = scroll down or up
# F or B = go to next or previous page
# $ = go to end of line
# 0 = go to beginning of line
# w or b = go to next or previous word
# / or ? = search forward or backward
# n	= search next (use after above commands)
# space = start selection
# Esc = clear selection
# y = copy line

# Yank(Copy) script path
yank="${HOME}/.bin/tmux/yank.sh"

# Enter copy mode
# PREFIX + ESC
bind Escape copy-mode # default key: prefix [?
# Easy exit of copy mode
#bind-key -T copy-mode Escape send -X cancel

# Disable mouse right-click to open the menu in tmux > 3.0
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 30 ]' \
    'unbind-key -T root MouseDown3Pane'

# Disable context menu in tmux >3.0
#unbind-key -n M-MouseDown3Pane
#unbind-key -n MouseDown3Pane
#unbind-key -n MouseDown3Status
#unbind-key -n MouseDown3StatusLeft

# Once you’re in copy mode, you can continue pressing M-Up ( ⌘↑ ) to scroll 1 line up.
# The usual PageDown and PageUp controls are available to scroll by whole screen,
# and extra M-PageDown and M-PageUp to scroll by a half of screen (really convenient).
# Note: bind-key syntax changed in v2.4 -- selection / copy / paste
# - in < v2.4 - vi-copy
# - in > v2.4 - copy-mode-vi and send-keys -X
#
# Scroll up/down by 1 line, half screen and whole screen
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
'bind -T vi-copy M-Up              scroll-up; \
bind -T vi-copy M-Down            scroll-down; \
bind -T vi-copy M-PageUp          halfpage-up; \
bind -T vi-copy M-PageDown        halfpage-down; \
bind -T vi-copy PageDown          page-down; \
bind -T vi-copy PageUp            page-up'

# in > v2.4 - copy-mode-vi and send-keys -X
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 24 ]' \
'bind -T copy-mode-vi M-Up              send-keys -X scroll-up; \
bind -T copy-mode-vi M-Down            send-keys -X scroll-down; \
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up; \
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down; \
bind -T copy-mode-vi PageDown          send-keys -X page-down; \
bind -T copy-mode-vi PageUp            send-keys -X page-up'

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
'bind -T vi-copy WheelUpPane       select-pane \; -N 2 scroll-up; \
bind -T vi-copy WheelDownPane     select-pane \; -N 2 scroll-down'

# in > v2.4 - copy-mode-vi and send-keys -X
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 24 ]' \
'bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up; \
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down'

# Copy text from remote session using SSH remote tunnel and systemd service ( https://medium.com/hackernoon/tmux-in-practice-copy-text-from-remote-session-using-ssh-remote-tunnel-and-systemd-service-dd3c51bca1fa )
# Copy complete line with PREFIX + y
bind -T copy-mode-vi y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank; tmux display-message 'Line is copy to buffer!'"

# Start selection with SPACE and copy using Y
bind -T copy-mode-vi Y send-keys -X copy-selection  \;\
    run "tmux save-buffer - | $yank; tmux display-message 'Selection is copy to buffer!'"

# Begin selection with v
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 24 ]' \
'bind -T copy-mode-vi v send -X begin-selection'

# A?
bind -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

## Mouse copy Support
# Copy selection on drag end event and cancel copy mode
bind -T copy-mode-vi MouseDragEnd1Pane \
   send-keys -X copy-pipe-and-cancel "$yank"

# Mouse wheel down clear the selection
bind -T copy-mode MouseDown1Pane select-pane \; send-keys -X clear-selection
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

# Select a word and copy to clipboard with:
# Double left mouse click
bind -T copy-mode DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-and-cancel "$yank"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-and-cancel "$yank"

# Select the complete line and copy to clipboard with:
# Triple left mouse click
bind -T copy-mode TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-and-cancel "$yank"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-and-cancel "$yank"

# Send to tmux clipboard or system clipboard
#bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "copy to tmux clipboard"
#bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "copy to system clipboard"

# ==================
# === Paste mode ===
# ==================
# Paste the copyed text
# PREFIX + p
bind p paste-buffer

# List paste buffer menue
# PREFIX + b
#bind b list-buffers

# Select saved buffer to paste
# PREFIX + CTRL + p
bind C-p choose-buffer

# Paste buffer with middle mouse click
# Delete old key binding
unbind MouseDown2Pane

# Bind middle mouse click to paste buffer
bind -n MouseDown2Pane paste-buffer

# Bind right mouse click to paste buffer
#bind -n MouseDown3Pane paste-buffer

# tmux 3.2 Add a default binding for button 2 to paste.

# ================
# === Fzf keys ===
# ================
# fzf-locate
# Search entire file system with ALT-` key,
# will split the current window and start fzf for the entire list of files.
# The selected files will be pasted on to the original window.
# ToDo: CHeck of fzf is installed
#
#bind-key -n 'M-`' run "tmux split-window -p 40 'tmux send-keys -t #{pane_id} \"$(locate / | fzf -m | paste -sd\\  -)\"'"

# Own fzf-tmux popup
# tmux > 3.2 (popup)
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'bind-key Tab capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; display-popup -w 80% -h 60% -E "${HOME}/.bin/fzf/fzf_tmux/fzf-tmux"'

# tmux -V < 3.2
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
#         'bind-key Tab capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; split-window -Z "${HOME}/.bin/fzf/fzf_tmux/fzf-tmux"'
# OR
#         bind-key Tab capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; split-window "${HOME}/.bin/fzf/fzf_tmux/fzf-tmux"

# ==============
# === Popups ===
# ==============
# tmux > 3.2 supports display-popup
# if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#bind -r g display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "lazygit -ucd ~/.config/lazygit/" # Open Lazygit inside popup
#bind -r f display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "ranger" # Open Lazygit inside popup
# bind -r w display-popup -d '#{pane_current_path}' -w 90% -h 90% # Create new popup scratch window
#bind-key h display-popup -w 90% -h 90% -E "htop"

#
#bind -n M-A display-popup -E show-tmux-popup.sh

# support detaching from nested session with the same shortcut
#bind -T popup M-A detach
#bind -T popup C-o copy-mode

# ===================
# === Pane status ===
# ===================
# tmux > 2.2 ??? why??
# [#{pane_title}]
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ]' \
    'set -g pane-border-status bottom; set -g pane-border-format " [Session: #{session_name}] [Window: #{window_name}] [Pane: #{pane_index}] [Path: #{pane_current_path}] [CMD: #{pane_current_command}] ";'

# ToDO: after pane creation rename hook
#set -g pane-border-format "#[fg=black, bg=green] #{pane_index} #{@custom_pane_title}"
#bind < command-prompt -p "New Title: " -I "#{@custom_pane_title}" "set-option -p @custom_pane_title '%%'"

# =================
# === Statusbar ===
# =================
# Set statusbar on
set -g status on
# Set statusbar refresh intervall to 1 second
set -g status-interval 1
# Set statusbar position
set -g status-position bottom
# Set statusbar justifying position
set -g status-justify left
# Set left and right statusbar length
set -g status-left-length 25
set -g status-right-length 200

# =========================================
# === Statusbar themes / colors / icons ===
# =========================================
# Feel free to NOT use this variables at all (remove, rename) this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# Define variables below Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# Battery status settings
set-option -g @batt_icon_charge_tier8 '█'
set-option -g @batt_icon_charge_tier7 '▇'
set-option -g @batt_icon_charge_tier6 '▆'
set-option -g @batt_icon_charge_tier5 '▅'
set-option -g @batt_icon_charge_tier4 '▄'
set-option -g @batt_icon_charge_tier3 '▃'
set-option -g @batt_icon_charge_tier2 '▂'
set-option -g @batt_icon_charge_tier1 '▁'
set-option -g @batt_icon_status_charged '🔋'
set-option -g @batt_icon_status_charging '⚡'
set-option -g @batt_icon_status_discharging '👎'
set-option -g @batt_color_status_primary_charged '#3daee9'
set-option -g @batt_color_status_primary_charging '#3daee9'

# Sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}/#{mem.total}'
set -g @sysstat_cpu_view_tmpl 'CPU:#[fg=#{cpu.color}]#{cpu.pused}#[default]'
set -g @sysstat_swap_view_tmpl 'SW:#[fg=#{swap.color}]#{swap.pused}#[default] #{swap.used}/#{swap.total}'
# Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
# CPU
set -g @sysstat_cpu_color_low "$color_level_ok"
set -g @sysstat_cpu_color_medium "$color_level_warn"
set -g @sysstat_cpu_color_stress "$color_level_stress"
# MEM
set -g @sysstat_mem_color_low "$color_level_ok"
set -g @sysstat_mem_color_medium "$color_level_warn"
set -g @sysstat_mem_color_stress "$color_level_stress"
# SWAP
set -g @sysstat_swap_color_low "$color_level_ok"
set -g @sysstat_swap_color_medium "$color_level_warn"
set -g @sysstat_swap_color_stress "$color_level_stress"

# Prefix highlight colors
#set -g @prefix_highlight_prefix_prompt 'Wait'
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"
set -g @prefix_highlight_copy_prompt 'Copy'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=$color_dark,bg=$color_secondary'
set -g @prefix_highlight_sync_prompt 'Sync'
# Affixes
#set -g @prefix_highlight_empty_has_affixes 'on'
# Note: @prefix_highlight_empty_prompt default is '' (empty char)
#set -g @prefix_highlight_empty_prompt '        '
#set -g @prefix_highlight_empty_attr 'fg=default,bg=green' # default is 'fg=default,bg=default'

# ============================
# === Statusbar appearence ===
# ============================
# Mode style
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
# The individual -fg, -bg and -attr options have been removed > 2.9
# they were superseded by -style options in tmux 1.9.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set -g mode-style "fg=default,bg=$color_main"' \
    'set -g mode-fg "default"; set -g mode-bg "$color_main"'

# Command line style
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
# The individual -fg, -bg and -attr options have been removed > 2.9
# they were superseded by -style options in tmux 1.9.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set -g message-style "fg=$color_main,bg=$color_dark"' \
    'set-option -g message-fg "$color_main"; set-option -g message-bg "$color_dark"'

# Status line style
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
# The individual -fg, -bg and -attr options have been removed > 2.9
# they were superseded by -style options in tmux 1.9.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set -g status-style "fg=$color_status_text,bg=$color_dark"' \
    'set-option -g status-fg "$color_status_text"; set-option -g status-bg "$color_dark"'

# Window segments in status line
set -g window-status-separator ""

# Powerline seperator
separator_powerline_left=""
separator_powerline_right=""

# Status style
# set-window-option -g window-status-style "fg=$color_status_text,bg=$color_dark"

# Window format
# I = Window index number
# W = Window name
set-window-option -g window-status-format "#I:#W"

# Status style current
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
# The individual -fg, -bg and -attr options have been removed > 2.9
# they were superseded by -style options in tmux 1.9.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g window-status-current-style "fg=$color_light,bold,bg=$color_main"' \
    'set-window-option -g window-status-current-fg "$color_light"; set-window-option -g window-status-current-attr bold; set-window-option -g window-status-current-bg "$color_main"'

# Window format
set-window-option -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default]#I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# When window has monitoring notification
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
# The individual -fg, -bg and -attr options have been removed > 2.9
# they were superseded by -style options in tmux 1.9.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
#set-window-option -g window-status-activity-style "blink"
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g window-status-activity-style "fg=$color_main"' \
    'set-window-option -g window-status-activity-fg "$color_main"'

# Outline for active pane
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
# The individual -fg, -bg and -attr options have been removed > 2.9
# they were superseded by -style options in tmux 1.9.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g pane-active-border-style "fg=$color_main"' \
    'set-window-option -g pane-active-border-fg "$color_main"'

# =========================
# === Statusbar widgets ===
# =========================
# Define widgets we're going to use in status bar (Note: That this is not the complete list, some of them are loaded from plugins)
# Session info
wg_session="#[fg=$color_session_text]#S#[default]"

# Date
wg_date="#[fg=$color_dark,reverse,bg=white]%a %d-%m-%Y %H:%M:%S#[default]"

# Host info
wg_host="#[fg=$$color_dark,reverse,bg=white]#H#[default]"

# Zoomed
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Zoomed],}#[default]"

# SSH info
wg_is_ssh="#[fg=$color_dark,reverse,bg=red][SSH] on#[default]"

# Local info
wg_is_local="#[fg=$color_dark,reverse,bg=green][LOCAL] on#[default]"

# Local ipv4 address
wg_local_ip4="#[fg=$color_dark,reverse,bg=cyan]#(hostname -I | cut -d \" \" -f 1)#[default]"

# Local ipv6 address
#wg_local_ip6="#[fg=$color_dark,reverse,bg=cyan]#(hostname -I | cut -d % -f 1)#[default]"

# Public ip address
wg_public_ip="#[fg=$color_dark,reverse,bg=cyan]#{ip_address}#[default]"

# VPN tunnel
wg_vpn="#([ ! -z $(ip a | egrep 'eth[0-9]|enp[0-9]s[0-9]|ppp[0-9]|tun[0-9]' -A 2 | awk '/inet /{printf $2}') ] && echo $(ip a | egrep 'eth[0-9]|enp[0-9]s[0-9]|ppp[0-9]|tun[0-9]' -A 2 | awk '/inet /{printf \"[VPN] \"$2}'))"

# Keyboard info
wg_keyboard="#[fg=colour184]#(localectl status | grep Layout | awk '{ print $3 }')#[default]"

# Show if Capslock is pressed
#wg_caps="#( if [ -e $(find /sys/class/leds -name "*capslock"|head -1)/brightness ] && [ $(cat $(find /sys/class/leds -name "*capslock"|head -1)/brightness) != 0 ]; then printf '#[fg=colour184][Caps]#[default]'; else printf ''; fi )"

# Show if Numlock is enabled
#wg_num="#( if [ -e $(find /sys/class/leds -name "*numlock"|head -1)/brightness ] && [ $(cat $(find /sys/class/leds -name "*numlock"|head -1)/brightness) != 0 ]; then printf '#[fg=colour184][Num]#[default]'; else printf ''; fi )"

# Baterry info (#{battery_icon}, #{battery_remain})
# | [Bat] $wg_battery
#wg_battery="#{battery_status_fg}#{battery_percentage}#[default]"

# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'Keymapping is OFF on' #H)#[default]"

# ==============================
# === Statusbar widget order ===
# ==============================
# Set the left statusbar
set -g status-left "$wg_session"

# Set the right statusbar
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed | #{sysstat_cpu} #{sysstat_loadavg} | #{sysstat_mem} | #{sysstat_swap} | $wg_is_local $wg_host | [Lan] $wg_local_ip4 | $wg_vpn | [Pub] $wg_public_ip | [Key] $wg_keyboard | $wg_date"

# ====================================
# === Renew environments variables ===
# ====================================
# Update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set -g update-environment 'DISPLAY KRB5CCNAME SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION SSH_TTY WINDOWID XAUTHORITY TERM DBUS_SESSION_BUS_ADDRESS'

# Set hook(trigger)
#set-hook -g client-attached 'run-shell "~/.bin/tmux/tmux-update-display.sh"'
#set-hook -g client-session-changed 'run-shell "~/.bin/tmux/tmux-update-display.sh"'

# Execute the renew env script with PREFIX + $
bind '$' run "~/.bin/tmux/renew_env.sh"

# ===============
# === Plugins ===
# ===============
# Check if tpm(Tmux plugin manager) is installed otherwise install it
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Set Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'

# Set prefix highlighted status plugin
# for highlighting pressed keys in tmux
set -g @plugin 'slange-dev/tmux-prefix-highlight'

# Sysstat Status plugin for CPU, CPU Average, MEM, MEM Total, Swap
set -g @plugin 'slange-dev/tmux-plugin-sysstat'

# Shows public IP Address on the status bar
set -g @plugin 'slange-dev/tmux-ip-address'
set -g @ip_address_refresh_key 'P'

# Display Plugin
# The problem:
# When you ssh -X into a machine and attach to an existing tmux session, the session contains the old $DISPLAY env variable.
# In order the x-server/client to work properly, you have to update $DISPLAY after connection.
# For example, the old $DISPLAY=:0 and you need to change to DISPLAY=localhost:10.0 for the ssh session to perform x-forwarding properly.
# The solution:
# When attaching to tmux session, update $DISPLAY for each tmux pane in that session This is performed by using tmux send-keys to the shell.
# This script handles updating $DISPLAY within vim also.
#set -g @plugin 'slange-dev/tmux-update-display'

# For zsh users to update $DISPLAY silently
#set -g @plugin 'zsh-renew-tmux-env'

# Logging Plugin
set -g @plugin 'slange-dev/tmux-logging'
set -g @logging-path "~/.tmux"
set -g @save-complete-history-path "~/.tmux"
set -g @screen-capture-path "~/.tmux"

# Tmux Fzf Plugin
# CopyQ (optional): Access system clipboard, fallback to builtin tmux buffers if copyq is not executable,
# pstree (optional): Display process tree.
set -g @plugin 'slange-dev/tmux-fzf'

# Open fzf menue with PREFIX + CTRL + f
TMUX_FZF_LAUNCH_KEY="C-f"

# Default value in tmux < 3.2 "-m"
# Default value in tmux >= 3.2 "-p -w 62% -h 38% -m --border=none"
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
TMUX_FZF_OPTIONS="-m" \
TMUX_FZF_OPTIONS="-p -w 62% -h 38% -m --border=none"

# Fzf preview
TMUX_FZF_PREVIEW=1

# With "follow" = 1,
# preview window will automatically scroll to the bottom.
TMUX_FZF_PREVIEW_FOLLOW=0

# Fzf menue order
TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"

# Similarly, TMUX_FZF_WINDOW_FORMAT and TMUX_FZF_SESSION_FORMAT can also be handled in this way.
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command}  [#{pane_width}x#{pane_height}] [history #{history_size}/#{history_limit}, #{history_bytes} bytes] #{?pane_active,[active],[inactive]}"

# By default, the current session, window, and pane, are not listed among the switch possibilities.
# To include it, set:
TMUX_FZF_SWITCH_CURRENT=1

# Tmux Fzf url Plugin
set -g @plugin 'slange-dev/tmux-fzf-url'
set -g @fzf-url-bind 'u'
set -g @fzf-url-history-limit '2000'
# simple example for capturing files like 'abc.txt'
#set -g @fzf-url-extra-filter 'grep -oE "\b[a-zA-Z]+\.txt\b"'
set -g @fzf-url-open "firefox"

# Open tmux-fzf-url in a tmux > 3.2 popup
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set -g @fzf-url-fzf-options "-w 50% -h 50% --multi -0 --no-preview --no-border"' # --border=sharp

# Sidebar Plugin
set -g @plugin 'slange-dev/tmux-sidebar'
set -g @sidebar-tree 'e'
set -g @sidebar-tree-focus 'w'
set -g @sidebar-tree-position 'right'
set -g @sidebar-tree-width '40'
set -g @sidebar-tree-command 'tree -C'
#set -g @sidebar-tree-pager 'view -'

# Notify Plugin
# prefix + m: Start monitoring a pane and notify when it finishes.
# prefix + alt + m: Start monitoring a pane, return it in focus and notify when it finishes.
# prefix + M: Cancel monitoring of a pane.
set -g @plugin 'slange-dev/tmux-notify'
set -g @tnotify-verbose 'on'

# To change the verbose notification text
set -g @tnotify-verbose-msg 'Tmux pane task completed!'
#set -g @tnotify-sleep-duration 'desired duration'

# Tmux menues Plugin
#set -g @plugin 'jaclu/tmux-menus'
#set -g @menus_trigger 'F1'
#set -g @menus_without_prefix 1
#set -g @menus_location_x 'C'
#set -g @menus_location_y 'C'

# Split status bar plugin
# Split into two parts : window + status-left/status-right, requires tmux version ~> 3.0
# limitation : this line must behind theme / status-left / status-right (either plugin way or directly setup above)
#if-shell -b '[ "$(echo $TMUX_VERSION > 3.0" | bc)" = 1 ]' \
set -g @plugin 'slange-dev/tmux-split-statusbar'

# [ on | off]
set -g @split-statusbar-mode 'on'

# [ M-s | -n F6 ] , this is for toggle statusbar-mode, define yourself just like bind-key
set -g @split-statusbar-bindkey '-n F6'

# [ M-s | -n F5 ] , this is the toggle for status-left / status-right hiding, define yourself just like bind-key
set -g @split-status-hide-bindkey '-n F5'

# Battery Plugin
set -g @plugin 'slange-dev/tmux-battery'

# ============================================
# === Nesting local and remote ssh sessions ==
# ============================================
# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is:
# to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session.
# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux.remote.conf'

# Also, change some visual styles when window keys are off
# Key F12 ON
#bind -T nested F12  \
bind -T root F12 \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

# Key F12 OFF
#bind -T nested_off F12  \
bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Run all plugins scripts
run '~/.tmux/plugins/tpm/tpm'
