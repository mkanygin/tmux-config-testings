# vim:ft=conf:
#############################################
### ████████╗███╗   ███╗██╗   ██╗██╗  ██╗ ###
### ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝ ###
###    ██║   ██╔████╔██║██║   ██║ ╚███╔╝  ###
###    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗  ###
###    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗ ###
###    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝ ###
#############################################

########################################################################
# @Version       : v0.01
# @Author        : Sebastian Thies Lange
# @Contact       : slange-dev@mail.ru
# @License       : 
# @ReadMe        : 
# @Copyright     : (c) 2023 Sebastian Thies Lange, Home Developments ###
# @Created       : 
# @File          : .tmux.conf
# @Description   : Tmux config file
# @TODO          : 
# @Other         :
# @Resource      :
########################################################################
# =============
# === Notes ===
# =============
# Ctrl keys may be prefixed with ‘C-’ or ‘^’,
# Alt (meta) with ‘M-’
# Prefix key is C-a(STRG + a)
# Tmux must be installed before
# sed, vlock, bc are automatic installed if not exist

# ==========================
# === Check Requirements ===
# ==========================
# Check if bc(Calculator) is installed otherwise install it
# bc is needed to check the tmux versions
if "test ! -e /bin/bc" \
   "run 'sudo apt install bc -y > /dev/null 2>&1'"

# Check if vlock is installed otherwise install it
if "test ! -e /bin/vlock" \
   "run 'sudo apt install vlock -y > /dev/null 2>&1'"

# Check if sed is installed otherwise install it
if "test ! -e /bin/sed" \
   "run 'sudo apt install sed -y > /dev/null 2>&1'"

# ==========================
# === Check Tmux Version ===
# ==========================
# For version-specific commands see: https://github.com/tmux/tmux/blob/master/CHANGES
# Save tmux version in the "TMUX_VERSION" env variable
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

# ========================
# === General settings ===
# ========================
## set the default TERM
set -g default-terminal screen

## Determine if we should enable 256-colour support
if-shell "[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]" 'set -g default-terminal screen-256color'

# Set history limit
set -g history-limit 30000
set -g buffer-limit 20

# Set key speed rate? (Allows for faster key repetition)
set -sg escape-time 0

# Set display refresh rate?
set -g display-time 3000
set -g remain-on-exit off

# Set increase repeat timeout
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# ======================
# === Terminal title ===
# Description:
# Set parent terminal title to
# reflect current window in tmux session 
# ======================
# Set title on
set -g set-titles on

# Set title to ???
set -g set-titles-string "[#H:#S] #W #T" # "#I:#W"

# =============================
# === Window/Pane numbering ===
# Description: 
# Start index of window/pane with 1,
# because we're humans not computers!
# =============================
# Set base start index to 1
set -g base-index 1

# Set base start pane index to 1
setw -g pane-base-index 1

# =====================
# === Mouse Support ===
# =====================
# All tmux version <v2.1 has the 4 mouse options:
# mouse-resize-pane
# mouse-select-pane
# mouse-select-window
# mode-mouse
# ...which turns on mouse support (https://github.com/tmux/tmux/blob/2.1/CHANGES#L6L13)
#
# All tmux versions >v2.1 was replaced the mouse options with:
# mouse on
# which turns on mouse support entirely (Changes from v2.1 to v2.2, 10 April 2016 (https://fossies.org/linux/tmux/CHANGES))

# Mouse support for tmux < v2.1 and > v2.1
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" -eq 1 ]' \
    'set -g mode-mouse on; set -g mouse-select-pane on; set -g mouse-resize-pane on; set -g mouse-select-window on' \
    'set -g mouse on'

# =====================
# === UTF 8 Support ===
# =====================
# UTF8 is autodetected in >v2.2, but errors if explicitly set
# Changes from v2.1 to v2.2, 10 April 2016 (https://fossies.org/linux/tmux/CHANGES)
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" -eq 1 ]' \
  'set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on'

# =============
# === Clock ===
# =============
# Show clock over the window
set-window-option -g clock-mode-colour green
set-window-option -g clock-mode-style 24

# ========================
# === Scrolling issues ===
# ========================
# If you have issues scrolling with Shift-Page Up/Down in your terminal,
# the following will remove the smcup and rmcup capabilities for any term that reports itself as
# anything beginning with xterm
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# ====================
# === Shell config ===
# ====================
# Start a non-login shell
# tmux starts a login shell by default, which may result in multiple negative side effects:
# - Users of fortune may notice that quotes are printed when creating a new panel.
# - The configuration files for login shells such as $HOME/.profile are interpreted each time a new panel is created,
# so commands intended to be run on session initialization (e.g. setting audio level) are executed.

# Set bash as the default shell
set -g default-shell "/bin/bash"
set -g default-command "${SHELL}"

# ====================
# === Key bindings ===
# ====================
# First we unbind default key bindings
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind "}"  # swap-pane -D
unbind "{"  # swap-pane -U
unbind ")"  # switch next session
unbind "("  # switch previous session
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer 
unbind "="  # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

#
unbind M-PageUp
unbind -n C-h
unbind C-h

# ==============================================
# === Prefix key C-a (CTRL + a), easier to type ===
# ==============================================
# Change prefix to C-a (CTRL + a) key, easier to type, same in screen?

# Unbind old prefix first
unbind C-b

# Change prefix to STRG + a key
set -g prefix C-a

# =========================
# === Tmux Command Keys ===
# =========================
# : open the tmux command line
# Vim style PREFIX + :
bind Space command-prompt

# ===================
# === Config Keys ===
# ===================
# Edit the configuration and reload tmux with new config
# PREFIX + CTRL + e
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Tmux configuration file edited and reloaded\"'"

# Reload tmux configuration file
# PREFIX + CTRL + r
bind C-r source-file ~/.tmux.conf \; display "Tmux configuration reloaded"

# ===================
# === Window Keys ===
# ===================
# Create new window and retain cwd
bind w new-window -c "#{pane_current_path}"

# Open windows select menue
bind W choose-tree -Zw

# Prompt to rename a window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# PREFIX + CTRL w
bind C-w command-prompt -p 'New window at:' 'new-window -c "#{pane_current_path}" -t %1'

# PREFIX + CTRL W
bind C-W command-prompt -p 'Insert window at:' 'new-window -c "#{pane_current_path}" -a -t %1; swap-window -t -1'

# Window manipulations
# PREFIX + ALT w
bind M-w command-prompt -p "Move window to:" "move-window -t %%"

# PREFIX + ALT W
bind M-W command-prompt -p "Swap window with:" "swap-window -t %%"

# ====================
# === Session Keys ===
# ====================
# Create a new session
# PREFIX + s
bind s new-session

# Open session select menue
# PREFIX + S
bind S choose-session -F 'session #{session_name} #{?session_attached,(attached),          } : #{session_windows} windows (#{window_name}#{pane_title})' \; refresh-client -S

# Automatic prompt to rename a session right after it's created
set-hook -g after-new-session 'command-prompt -I "#{session_name}" "rename-session '%%'"'

#
#bind n   switch-client -n \; refresh-client -S
#bind N   switch-client -p \; refresh-client -S

# ====================
# === Reorder Keys ===
# ====================
# Set automatic reorder window numbering?
set -g renumber-windows off

# Set . key to reorder the windows
# PREFIX + .
bind . move-window -r \; display-message "Windows reordered..."

# ===================
# === Rename Keys ===
# ===================
# Rename the selected window
# PREFIX + r
bind r command-prompt -I "#{window_name}" "rename-window '%%'"

# Rename the selected session
# PREFIX + R
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# ==================
# === Split Keys ===
# ==================
# PREFIX + | for vertical split
bind | split-window -h -p 50 -c "#{pane_current_path}"

# PREFIX + - for vertical split
bind - split-window -v -p 50 -c "#{pane_current_path}"

# PREFIX + v for horizontal split
bind h split-window -h -p 50 -c "#{pane_current_path}"

# PREFIX + v for vertical split
bind v split-window -v -p 50 -c "#{pane_current_path}"

# ========================
# === Resize Pane Keys ===
# ========================
# Use vi style key bindings
# Vim Style: h / j / k / l = left/down/up/right

# Normal pane resize with ALT + arrow keys without prefix
# move left
bind -n M-Left resize-pane  -L 5

# move down
bind -n M-Down resize-pane  -D 5

# move up
bind -n M-Up resize-pane    -U 5

# move right
bind -n M-Right resize-pane -R 5

# Vim pane resize with ALT + hjkl without prefix
# Check if Vim is running
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'

# move left 
bind -n M-h if-shell "$is_vim" "send-keys M-h" "resize-pane -L 5"

# move down
bind -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D 5"

# move up
bind -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U 5"

# move right
bind -n M-l if-shell "$is_vim" "send-keys M-l" "resize-pane -R 5"

# Check if tmux version is <v3.0 or >v3.0
#if-shell -b '[ "$(echo "$TMUX_VERSION < 3.0" | bc)" = 1 ]' \
#    "bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'resize-pane -l'" \
#    "bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'resize-pane -l'"

# ============================
# === Pane Navigation Keys ===
# ============================
# Normal pane select with CTRL + arrow keys without prefix before
# move left
bind -n C-Left select-pane  -L

# move down
bind -n C-Down select-pane  -D

# move up
bind -n C-Up select-pane    -U

# move right
bind -n C-Right select-pane -R

# Smart pane switching with awareness of vim splits
# from: https://github.com/christoomey/vim-tmux-navigator
# Vim pane selection with ALT + h/j/k/l without prefix before
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'

# Select pane left
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"

#
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"

#
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"

#
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# Check if tmux version is <v3.0 or >v3.0
#if-shell -b '[ "$(echo "$TMUX_VERSION < 3.0" | bc)" = 1 ]' \
#    "bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'" \
#    "bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# ==============================
# === Window navigation Keys ===
# ==============================
# Switch windows with SHIFT + LEFT/RIGHT keys without prefix
bind -n S-Left  previous-window
bind -n S-Right next-window

# Switch to specific window with PREFIX + 0-9 keys
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9
bind 0 last-window

# ================================
# === Display pane Number keys ===
# ================================
# Display the pane numbers to identify with PREFIX + q
bind q display-panes

# =================
# === Zoom keys ===
# =================
# Zoom the pane with PREFIX + z
bind z resize-pane -Z

# ============================
# === Syncronize pane keys ===
# ============================
# Synchronize all panes in a window with PREFIX + y
# bind y setw synchronize-panes

# =================
# === Link keys ===
# =================
# Linkink a window with PREFIX + L
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# =================
# === Swap keys ===
# =================
# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
#bind \\ if-shell '[ #{pane_index} -eq 1 ]' \
#     'swap-pane -s "!"' \
#     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Swap pane with PREFIX + CTRL + o
bind -r C-o swap-pane -D

# ===================
# === Switch keys ===
# ===================
#bind -n C-s display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# ==================
# === Merge keys ===
# Description:
# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
# ==================

# PREFIX + CTRL + u
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# =================
# === Kill Keys ===
# Kill pane/window/session keys
# ToDo:
# X and X for Kill Windows and for kill Panes?
# =================

# Kill pane with "PREFIX + x"
bind x kill-pane

# Kill window with "PREFIX + X"
#bind X kill-window

# Which window to kill with PREFIX + X
# What windows will you kill? ex: bash, Help, htop, per names...
bind X command-prompt -p "Windows to kill?:" "              \
    run-shell '                                             \
        for w in \$(echo %% | sort -n -r); do               \
            tmux kill-window -t \$w;                        \
        done;                                               \
    '"

# Kill all other windows otherwise the selected one
# PREFIX + CTRL + x
bind C-x confirm-before -p "kill all other windows? (y/n)" "kill-window -a"

# Kill your Session with "PREFIX + Q" DONT work!
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Kill all other session otherwise your selected one
bind C-Q confirm-before -p "kill all other sessions? (y/n)" "kill-session -a"

# ===================
# === Detach Keys ===
# ===================
# Detach from session with PREFIX + d
bind d detach

# Detach all other sessions from all user with PREFIX + D
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach all sessions from other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached, can´t Detach other clients"'

# ====================
# === Logging Keys ===
# ====================
# Toggle (start/stop) logging in the current pane.
    # Key binding: prefix + shift + p
    # File name format: tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: ~/tmux-my-session-0-1-20140527T165614.log

# Save visible text, in the current pane. Equivalent of a "textual screenshot".
    # Key binding: prefix + alt + p
    # File name format: tmux-screen-capture-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: tmux-screen-capture-my-session-0-1-20140527T165614.log

# Save complete history
# Save complete pane history to a file. Convenient if you retroactively remember you need to log/save all the work.
    # Key binding: prefix + alt + shift + p
    # File name format: tmux-history-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: tmux-history-my-session-0-1-20140527T165614.log
    # NOTE: this functionality depends on the value of history-limit - the number of lines Tmux keeps in the scrollback buffer. Only what Tmux kept will also be saved, to a file.
# Use set -g history-limit 50000 in .tmux.conf, with modern computers it is ok to set this option to a high number.

# Clear pane history
    # Key binding: prefix + alt + c
# This is just a convenience key binding.

# Save complete terminal output to a file ~/.tmux/buffer/tmux.buffer
# (prefix) + b
bind b capture-pane -b temp-capture-buffer -S - \; save-buffer -b temp-capture-buffer ~/.tmux.buffer \; delete-buffer -b capture-buffer

# Save complete terminal output to a file and ask for file to saved
# (prefix) + B
bind B command-prompt -I "~/.tmux.buffer" -p "Store current pane contents to file:" "capture-pane -b temp-capture-buffer -S -; save-buffer -b temp-capture-buffer %1; delete-buffer -b capture-buffer"

# ==========================
# === Vlock Locking Keys ===
# ==========================
# Lock command to execute
set -g lock-command "vlock"

# Set TMOUT variable from .bashrc if exist
# Set automatic lock after X seconds
# 0 = never, 900=15min., 1800=30min. etc.
if-shell -b '[ ! -z $TMOUT ]' \
    'set -g lock-after-time $TMOUT' \
    'set -g lock-after-time 900'

# PREFIX l lock the coplete session
# bind L lock-client !in use by linking windows!
bind l lock-session

# =========================
# === Mouse toggle Keys ===
# =========================
# Apps that use own F1-12 commands
tmux_commands_with_function_keys="htop mc nvim vi vim"

# Mouse can be toggled with F10
bind -T root F10 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send F10" "set -g mouse \; display-message 'Mouse [#{?mouse,ON,OFF}]'"

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
# Monitor windows activity can be shutdown with F9
bind -T root F9 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send F9" "setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'"

# Monitor windows activity silence can be set in seconds with F8
bind -T root F8 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send F8" "setw monitor-silence 0 \; display-message 'Monitor window silence [OFF]' \; command-prompt -p 'Monitor silence: interval (s)' 'setw monitor-silence %%'"

# Display NO messages about silence, bell, and activity.
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off

# ======================
# === Statusbar Keys ===
# ======================
# Statusbar can be toggled with F7
bind -T root F7 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send F7" "set -g status \; display-message 'Statusbar is now [#{?status,ON,OFF}]'"

# =======================================
# === Copy mode, scroll and clipboard ===
# =======================================
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# show-options -g -s set-clipboard
# set-clipboard on|external

# Copy mode
# Using ANSI OSC 52 escape sequence fallback support for macOS
# https://medium.com/free-code-camp/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
if-shell -b '[ uname -s = Darwin ]' \
'set -g @copy_use_osc52_fallback on' \
'set -g @copy_use_osc52_fallback off'

# Use vi key bindings style in copy mode
setw -g mode-keys vi
set -g status-keys vi

# https://tmuxguide.readthedocs.io/en/latest/tmux/tmux.html -> 1.10. Copy mode
# Command	Description
# Esc = go to copy mode
# q	= quit mode
# j, k, l, h = down, up, right left
# J or K = scroll down or up
# F or B = go to next or previous page
# $ = go to end of line
# 0 = go to beginning of line
# w or b = go to next or previous word
# / or ? = search forward or backward
# n	= search next (use after above commands)
# space = start selection
# Esc = clear selection
# y = copy line

# Yank(Copy) script path
yank="~/.bin/tmux/yank.sh"

# Enter copy mode with PREFIX + ESC
bind Escape copy-mode

# Once you’re in copy mode, you can continue pressing M-Up ( ⌘↑ ) to scroll 1 line up.
# The usual PageDown and PageUp controls are available to scroll by whole screen,
# and extra M-PageDown and M-PageUp to scroll by a half of screen (really convenient).
# Scroll up/down by 1 line, half screen, whole screen
#
# bind-key syntax changed in v2.4 -- selection / copy / paste
# in <v2.4 - vi-copy
# in >v2.4 - copy-mode-vi and send-keys -X
#
# in <v2.4 - vi-copy
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
'bind -T vi-copy M-Up              scroll-up; \
bind -T vi-copy M-Down            scroll-down; \
bind -T vi-copy M-PageUp          halfpage-up; \
bind -T vi-copy M-PageDown        halfpage-down; \
bind -T vi-copy PageDown          page-down; \
bind -T vi-copy PageUp            page-up'

# in >v2.4 - copy-mode-vi and send-keys -X
if-shell -b '[ "$(echo "$TMUX_VERSION > 2.4" | bc)" = 1 ]' \
'bind -T copy-mode-vi M-Up              send-keys -X scroll-up; \
bind -T copy-mode-vi M-Down            send-keys -X scroll-down; \
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up; \
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down; \
bind -T copy-mode-vi PageDown          send-keys -X page-down; \
bind -T copy-mode-vi PageUp            send-keys -X page-up'

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
# in <v2.4 - vi-copy
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
'bind -T vi-copy WheelUpPane       select-pane \; -N 2 scroll-up; \
bind -T vi-copy WheelDownPane     select-pane \; -N 2 scroll-down'

# in >v2.4 - copy-mode-vi and send-keys -X
if-shell -b '[ "$(echo "$TMUX_VERSION > 2.4" | bc)" = 1 ]' \
'bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up; \
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down'

# tmux in practice: copy text from remote session using SSH remote tunnel and systemd service
# https://medium.com/hackernoon/tmux-in-practice-copy-text-from-remote-session-using-ssh-remote-tunnel-and-systemd-service-dd3c51bca1fa

# Begin selection with v
bind -T copy-mode-vi v send -X begin-selection

# copy complete line with PREFIX + yy
bind -T copy-mode-vi y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank; tmux display-message 'Line is copy to buffer!'"

# start selection with 'space' and copy using 'y'
bind -T copy-mode-vi Y send-keys -X copy-selection  \;\
    run "tmux save-buffer - | $yank; tmux display-message 'Selection is copy to buffer!'"

# A?
bind -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

## Mouse copy Support
# Copy selection on drag end event,
# and cancel copy mode
bind -T copy-mode-vi MouseDragEnd1Pane \
   send-keys -X copy-pipe-and-cancel "$yank"

# 
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

# Select word and copy to clipboard with double left mouse click
bind -T copy-mode DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-and-cancel "$yank"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-and-cancel "$yank"

# Select complete line and copy to clipboard with triple left mouse click
bind -T copy-mode TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-and-cancel "$yank"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-and-cancel "$yank"

# ==================
# === Paste mode ===
# ==================
# Paste copyed text
# PREFIX + p
bind p paste-buffer

# List paste buffers
# PREFIX + b
#bind b list-buffers

# Select saved buffer to paste
# PREFIX + CTRL + p
bind C-p choose-buffer

# Paste buffer with middle mouse click
# Delete old key binding
unbind MouseDown2Pane

# Bind middle mouse to paste buffer
bind -n MouseDown2Pane paste-buffer
   
# =============
# === Theme ===
# =============
# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# Battery status settings
# $wg_battery 
set-option -g @batt_icon_charge_tier8 '█'
set-option -g @batt_icon_charge_tier7 '▇'
set-option -g @batt_icon_charge_tier6 '▆'
set-option -g @batt_icon_charge_tier5 '▅'
set-option -g @batt_icon_charge_tier4 '▄'
set-option -g @batt_icon_charge_tier3 '▃'
set-option -g @batt_icon_charge_tier2 '▂'
set-option -g @batt_icon_charge_tier1 '▁'
set-option -g @batt_icon_status_charged '🔋'
set-option -g @batt_icon_status_charging '⚡'
set-option -g @batt_icon_status_discharging '👎'
set-option -g @batt_color_status_primary_charged '#3daee9'
set-option -g @batt_color_status_primary_charging '#3daee9'

# =================================
# === Appearence and status bar ===
# =================================
#
set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"
#setw -g window-status-activity-style "blink"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# =================
# === Statusbar ===
# =================
# General status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-left-length 120
set -g status-right-length 180

# Define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_date="#[fg=$color_dark,reverse,bg=white]%a %d-%m-%Y %H:%M:%S#[default]"
wg_host="#[fg=$$color_dark,reverse,bg=white]#H#[default]"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Zoomed],}#[default]"
wg_is_ssh="#[fg=$color_dark,reverse,bg=red][SSH] on#[default]"
wg_is_local="#[fg=$color_dark,reverse,bg=green][LOCAL] on#[default]"
wg_ip="#[fg=$color_dark,reverse,bg=cyan]#(hostname -I | cut -d \" \" -f 1)#[default]"
#wg_vpn="#([ ! -z $(ip a | egrep 'ppp0|tun0' -A 2 | awk '/inet /{printf $2}') ] && echo $(ip a | egrep 'ppp0|tun0' -A 2 | awk '/inet /{printf \"[VPN] \"$2}'))"
wg_vpn="#([ ! -z $(ip a | egrep 'eth0|tun0' -A 2 | awk '/inet /{printf $2}') ] && echo $(ip a | egrep 'eth0|tun0' -A 2 | awk '/inet /{printf \"[VPN] \"$2}'))"
wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage} #{battery_remain}"
wg_keyboard="#[fg=yellow]#(localectl status | grep Layout | awk '{ print $3 }')#[default]"
wg_keyboard2="#{keyboard_type}#[default]"

# Capslock
wg_caps=#{\
if [ -e $(find /sys/class/leds -name "*capslock"|head -1)/brightness ]\
        && [ $(cat $(find /sys/class/leds -name\
            "*capslock"|head -1)/brightness) != 0 ]; then\
    printf '#[fg=colour184]Caps Lock on#[fg=colour0] ';\
else\
    printf '             ';\
fi;}

# Numlock
wg_num=#{\
if [ -e $(find /sys/class/leds -name "*numlock"|head -1)/brightness ]\
        && [ $(cat $(find /sys/class/leds -name\
            "*numlock"|head -1)/brightness) = 0 ]; then\
    printf '#[fg=colour184]Num Lock off#[fg=colour0] ';\
else\
    printf '             ';\
fi;}

# #{?client_prefix,⌨ ,  } ???
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'Keymapping is OFF on' #H)#[default]"

# Statusbar left
set -g status-left "$wg_session"

# Statusbar right
# | [Bat] $wg_battery |
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed $wg_caps $wg_num | #{sysstat_cpu} #{sysstat_loadavg} | #{sysstat_mem} | #{sysstat_swap} | $wg_is_local $wg_host $wg_ip | $wg_vpn | [Pub] #{ip_address} | [Key] $wg_keyboard | $wg_date"

# ========================
# === Colors and Icons ===
# ========================
# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}/#{mem.total}'

#
set -g @sysstat_cpu_view_tmpl 'CPU:#[fg=#{cpu.color}]#{cpu.pused}#[default]'

#
set -g @sysstat_swap_view_tmpl 'SW:#[fg=#{swap.color}]#{swap.pused}#[default] #{swap.used}/#{swap.total}'

# Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_cpu_color_low "$color_level_ok"
set -g @sysstat_cpu_color_medium "$color_level_warn"
set -g @sysstat_cpu_color_stress "$color_level_stress"

#
set -g @sysstat_mem_color_low "$color_level_ok"
set -g @sysstat_mem_color_medium "$color_level_warn"
set -g @sysstat_mem_color_stress "$color_level_stress"

#
set -g @sysstat_swap_color_low "$color_level_ok"
set -g @sysstat_swap_color_medium "$color_level_warn"
set -g @sysstat_swap_color_stress "$color_level_stress"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=$color_dark,bg=$color_secondary'
#set -g @prefix_highlight_prefix_prompt '^A'
#set -g @prefix_highlight_copy_prompt 'Copy'
#set -g @prefix_highlight_sync_prompt 'Sync'
#set -g @prefix_highlight_empty_prompt ''          # default is '' (empty char)
#set -g @prefix_highlight_empty_attr 'fg=default,bg=green' # default is 'fg=default,bg=default'

# ====================================
# === Renew environments variables ===
# ====================================
## update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set -g update-environment 'DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION SSH_TTY WINDOWID XAUTHORITY TERM'

#
#set-hook client-attached 'run-shell "~/.bin/tmux/tmux-update-display.sh"'
#set-hook client-session-changed 'run-shell "~/.bin/tmux/tmux-update-display.sh"'

# Execute renew env script
bind '$' run "~/.bin/tmux/renew_env.sh"

# ===============
# === Plugins ===
# ===============
# Check if tpm(Tmux plugin manager) is installed otherwise install it
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'

# Prefix Status plugin for highlighting pressed keys in tmux
set -g @plugin 'slange-dev/tmux-prefix-highlight'

# Sysstat Status plugin for CPU, CPU Average, MEM, MEM Total, Swap
set -g @plugin 'slange-dev/tmux-plugin-sysstat'

# Shows public IP Address on the status bar
set -g @plugin 'anghootys/tmux-ip-address'
#set -g @ip_address_refresh_key 'P'

# Open url Plugin
#set -g @plugin 'tmux-plugins/tmux-open'
#set -g @open-B 'https://www.bing.com/search?q='
#set -g @open-S 'https://www.google.com/search?q='

# Display Plugin
# The problem:
# When you ssh -X into a machine and attach to an existing tmux session, the session contains the old $DISPLAY env variable.
# In order the x-server/client to work properly, you have to update $DISPLAY after connection.
# For example, the old $DISPLAY=:0 and you need to change to DISPLAY=localhost:10.0 for the ssh session to perform x-forwarding properly.
# The solution:
# When attaching to tmux session, update $DISPLAY for each tmux pane in that session This is performed by using tmux send-keys to the shell.
# This script handles updating $DISPLAY within vim also.
#set -g @plugin 'slange-dev/tmux-update-display'

# For zsh users to update $DISPLAY silently
#set -g @plugin 'zsh-renew-tmux-env'

# Logging Plugin
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @logging-path "~/.tmux"

# Tmux Fzf url Plugin
# need https://github.com/junegunn/fzf
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @fzf-url-bind 'u'
set -g @fzf-url-history-limit '2000'
# open tmux-fzf-url in a tmux v3.2+ popup
#if-shell -b '[ "$(echo "$TMUX_VERSION > 3.2" | bc)" = 1 ]' \
    #'set -g @fzf-url-fzf-options "-w 50% -h 50% --multi -0 --no-preview --no-border"' # --border=sharp

# Tmux Fzf Plugin
# Need: GNU bash, sed, junegunn/fzf, 
# CopyQ (optional): Access system clipboard, fallback to builtin tmux buffers if copyq is not executable, pstree (optional): Display process tree.
#
set -g @plugin 'sainnhe/tmux-fzf'
#
TMUX_FZF_LAUNCH_KEY="C-f"
#
# Default value in tmux < 3.2
# Check if tmux version is <v3.0 or >v3.0
# Default value in tmux < 3.2 "-m"
# Default value in tmux >= 3.2 "-p -w 62% -h 38% -m --border=none"
if-shell -b '[ "$(echo "$TMUX_VERSION < 3.2" | bc)" = 1 ]' \
TMUX_FZF_OPTIONS="-m" \
TMUX_FZF_OPTIONS="-p -w 62% -h 38% -m --border=none"

TMUX_FZF_PREVIEW=1
#
TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"
#
# Similarly, TMUX_FZF_WINDOW_FORMAT and TMUX_FZF_SESSION_FORMAT can also be handled in this way.
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command}  [#{pane_width}x#{pane_height}] [history #{history_size}/#{history_limit}, #{history_bytes} bytes] #{?pane_active,[active],[inactive]}"

# Sidebar Plugin
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree 'e'
set -g @sidebar-tree-focus 'w'
set -g @sidebar-tree-position 'right'
set -g @sidebar-tree-width '40'
set -g @sidebar-tree-command 'tree -C'
#set -g @sidebar-tree-pager 'view -'

# Notify Plugin
# prefix + m: Start monitoring a pane and notify when it finishes.
# prefix + alt + m: Start monitoring a pane, return it in focus and notify when it finishes.
# prefix + M: Cancel monitoring of a pane.
set -g @plugin 'ChanderG/tmux-notify'
set -g @tnotify-verbose 'on'
# To change the verbose notification text put 
#set -g @tnotify-verbose-msg 'Tmux pane task completed!'
#set -g @tnotify-sleep-duration 'desired duration'

# Tmux menues Plugin
#set -g @plugin 'jaclu/tmux-menus'
#set -g @menus_trigger 'F9'
#set -g @menus_without_prefix 1
#set -g @menus_location_x 'C'
#set -g @menus_location_y 'C'

# Split status bar Plugin
# into two parts : window + status-left/status-right, requires tmux version ~> 3.0
# limitation : this line must behind theme / status-left / status-right (either plugin way or directly setup above)
#if-shell -b '[ "$(echo "$TMUX_VERSION > 3.0" | bc)" = 1 ]' \
set -g @plugin 'charlietag/tmux-split-statusbar'
# [ on | off]
set -g @split-statusbar-mode 'on'
# [ M-s | -n F6 ] , this is for toggle statusbar-mode, define yourself just like bind-key
set -g @split-statusbar-bindkey '-n F6'
# [ M-s | -n F6 ] , this is for toggle statusbar-mode, define yourself just like bind-key
#set -g @split-statusbar-bindkey 'S'
# [ M-s | -n F5 ] , this is the toggle for status-left / status-right hiding, define yourself just like bind-key
set -g @split-status-hide-bindkey '-n F5'
# [ M-s | -n F5 ] , this is the toggle for status-left / status-right hiding, define yourself just like bind-key
#set -g @split-status-hide-bindkey 'H'

# Battery Plugin
#set -g @plugin 'slange-dev/tmux-battery'

# ============================================
# === Nesting local and remote ssh sessions ==
# ============================================
# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux.remote.conf'

# Also, change some visual styles when window keys are off
# Key F12 ON
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

# Key F12 OFF
bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Run all plugins scripts
run '~/.tmux/plugins/tpm/tpm'
